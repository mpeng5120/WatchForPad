package com.wifi.exchange;

import java.net.DatagramPacket;
import java.util.ArrayList;

import com.wifi.data.AlmWatchAdapter;
import com.wifi.data.BaseData;
import com.wifi.data.Config;
import com.wifi.data.HexDecoding;
import com.wifi.data.WatchAdapter;
import com.wifi.scan.R;
import android.app.Activity;
import android.content.Intent;
import android.util.Log;
import android.widget.ListAdapter;
import android.widget.ListView;

/**
 * 复位状态查询
 * @author 李婷婷
 *
 */
public class SendBroadCastToMain implements Runnable {
	
	protected static final String TAG = "SendBroadCastToMain";
	//整合好的plc地址加上偏移的地址（计数器）
	/*private WifiReadDataFormat formatReadMessage=new WifiReadDataFormat(
			AddressPublic.finalPlcData_Head+PlcData.getMCNToffsetAddress(0),
			4*Define.MAX_COUNTER_NUM );*/
	private WifiReadDataFormat formatReadMessage=new WifiReadDataFormat(0x1000B200, 124);//(0x10007000, 32);
	private static boolean selfDestroy_flag;
	public static boolean existFlag = false;
	private byte[] getData;
	private WatchAdapter ListAdapter ;
	private AlmWatchAdapter almListAdapter ;
	private boolean isAuto = false;
	
	private int aaa =0;
	private Activity targetActivity;
	
	
	
	/**
	 * 构造函数
	 * @param targetActivity
	 * @param viewbeingChangedArrayList
	 */
	public SendBroadCastToMain(Activity targetActivity, WatchAdapter adapter,AlmWatchAdapter almAdapter) {
		selfDestroy_flag = true;
		Config.SendBlank = true;
		this.ListAdapter= adapter ;
		this.almListAdapter = almAdapter;
		this.targetActivity = targetActivity;
	}
	
	
	
	
	
	
	
	/** 读取伺服参数时的通信线程收到信息时的处理函数. */
	private  ChatListener Feedback = new ChatListener() {

		@Override
		public void onChat(ArrayList<DatagramPacket> messageList) {
			// TODO 自动生成的方法存根
			    Log.e("mpeng","ReadDataFeedback ChatListener");	
				int size = Config.devicelist.size();	
				Config.alarmdevicelist.clear();
				for(int i = 0;i<size;i++)
				{
//					Log.d("mpeng","the i is "+i+"size is "+size);
					int messageSize =  Config.MessageList.size();					
					if(messageSize==0)
					{
//						未到到客户端发来的消息，请检查网络
						BaseData bd =Config.devicelist.get(i);
						int count =Integer.valueOf(bd.getMissCnt()).intValue();
						if(count>=30)
						{
							String connStatus =  targetActivity.getResources().getString(R.string.offline_state); 
							bd.setConnectionStatus(connStatus);								
							
						}else
						{
							count++;
							bd.setMissCnt(""+count);
						}
						if(bd.getRunningStatus()!=null&&bd.getRunningStatus().equals("警报"))
						{								
							Config.alarmdevicelist.add(bd);
						}
//						ListAdapter.notifyDataSetChanged();
						continue;
					}
					

					for(int j = 0 ;j<messageSize;j++)
					{
						byte[] data = Config.MessageList.get(j).getData();
						BaseData bd =Config.devicelist.get(i);
//						String ip = ((BaseData)Config.devicelist.get(i)).getIpAdd().toString();
						int ipNum =Integer.valueOf(bd.getIpAdd()).intValue();
						String ip = ""+(ipNum+2);
						String ip1 = Config.MessageList.get(j).getAddress().getHostAddress().toString();			
						int index= ip1.lastIndexOf(".");
						ip1 = ip1.substring(index+1);
						Log.e("mpeng"," ip "+ip+"ip1:"+ip1);
						if(ip.equals(ip1))
						{							
							formatReadMessage.backMessageCheck(data);
							if(formatReadMessage.finishStatus()&&(formatReadMessage.getErrFlag())){
///
								//发送正确且完成   处理返回的数据	
								//0-7pos|count(bit8-9)|周期（bit10-12）|状态（bit13）|
								//
								getData=new byte[formatReadMessage.getLength()];
								//获取返回的数据，从第八位开始拷贝数据
								System.arraycopy(formatReadMessage.getFinalData(),0, getData, 0, formatReadMessage.getLength());
															
								byte[] ProductData =  new byte[4];
								System.arraycopy(getData, 120, ProductData, 0, 4);
								int tarNumber = HexDecoding.Array4Toint(ProductData);
								bd.setTargetNum(""+tarNumber);
								
								byte[] completeData =  new byte[4];
								System.arraycopy(getData, 116, completeData, 0, 4);
								int CompleteNumber = HexDecoding.Array4Toint(completeData);
								bd.setCompletedNum(""+CompleteNumber);
								
								int remNumber = tarNumber -CompleteNumber;
								bd.setRemainNum(""+remNumber);
								String connStatus =  targetActivity.getResources().getString(R.string.watch_state); 
		
								bd.setConnectionStatus(connStatus);
								
								
								int MissTime =Integer.valueOf(bd.getMissCnt()).intValue();
								String SysStatus = bd.getRunningStatus();
								if(((int)((getData[52]>>4)&0x01))==1){//警报
									SysStatus = targetActivity.getResources().getString(R.string.alarm_state); 
									Config.alarmdevicelist.add(bd);
									isAuto =false;
								}else if(((int)((getData[52]>>2)&0x01))==1) //自动
							    {
									isAuto =true;
							    	SysStatus = targetActivity.getResources().getString(R.string.product_state); 
							    }else if((MissTime==0)&&(!isAuto))//if(((int)((getData[52]>>3)&0x01))==1) //手动 停止
							    {
							    	isAuto =false;
									SysStatus = targetActivity.getResources().getString(R.string.stop_state); 
									
							    }else  if(MissTime==0)
							    {
							    	isAuto =false;
							    }
								bd.cleanMissCnt(); //当收到此IP的客户端发来的消息  则把错误次数清零
								bd.setRunningStatus(SysStatus);	
								Config.devicelist.set(i, bd);
								Config.MessageList.remove(j);
								Log.e("mpeng","update list !!");
								
//								ListAdapter.notifyDataSetChanged();
							}
							 //查找成功，直接跳出，不再往下查找
							break;
						}else if(j == (messageSize-1))  //在收到的MESSAGELIST里面没有找到当前的IP的主机发出来的消息， 记录下来
						{						
							Log.e(TAG,"未收到 ："+bd.getIpAdd()+"返回来的消息！！");
							int count =Integer.valueOf(bd.getMissCnt()).intValue();
							
							if(count>=30)
							{
								String connStatus =  targetActivity.getResources().getString(R.string.offline_state); 
								bd.setConnectionStatus(connStatus);								
								
							}else
							{
								count++;								
								bd.setMissCnt(""+count);
							}
							if((bd.getRunningStatus()!= null)&&bd.getRunningStatus().equals("警报"))
							{								
								Config.alarmdevicelist.add(bd);
							}
//							ListAdapter.notifyDataSetChanged();
						
						}
						
					}
						
				}
//				Intent it = new Intent();
//				it.setAction("updateListView");
//				targetActivity.sendBroadcast(it);
//				Log.e("mpeng"," updata list ");
				ListAdapter.notifyDataSetChanged();
				almListAdapter.notifyDataSetChanged();
		}
		
	};
	
	//销毁该线程
	public void destroy() {
			System.out.println("SendBroadCastToMain 关闭");		
			selfDestroy_flag=false;
			existFlag = false;
			Config.SendBlank = true;			
			if(Config.Userver!=null)
			{
				Config.Userver.Destroy();
				Config.Userver = null;
			}
	}
	
	@Override
	public void run() {
		try {
		while (selfDestroy_flag) {	
			
			if (selfDestroy_flag&&Config.Userver!=null&&Config.SendBlank) {
				            Config.SendBlank = false;
							Thread.sleep(170);
							aaa++;
							Log.d("mpeng","run~~~~~~delay~~~~~~~~~ formatReadMessage ");
							if(	Config.Userver!=null)
								Config.Userver.sendMessage(formatReadMessage,Feedback);
						}	
		   }
		} catch (Exception e) {
		e.printStackTrace();
		destroy();
	}

	}

	
	
	
}
